    private void CopyPropertiesFrom(TransactionReportRequestBindingModel src)
    {
      if(src == null)
      {
        return;
      }

      var srcType = src.GetType();
      var dest = this;
      var destType = dest.GetType();

      var props = srcType.GetProperties()
        .Select(x => new { TargetProperty = destType.GetProperty(x.Name), SourceProperty = x })
        .Where(x => x.SourceProperty.CanRead &&
                    x.TargetProperty != null &&
                    (x.TargetProperty.GetSetMethod(true) != null && x.TargetProperty.GetSetMethod(true).IsPrivate) &&
                    (x.TargetProperty.GetSetMethod().Attributes & MethodAttributes.Static) == 0 &&
                    x.TargetProperty.PropertyType.IsAssignableFrom(x.SourceProperty.PropertyType)
              );
      foreach(var prop in props)
      {
        prop.TargetProperty.SetValue(dest, prop.SourceProperty.GetValue(src, null), null);
      }
    }


    using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;

using Android.App;
using Android.Content;
using Android.OS;
using Android.Runtime;
using Android.Views;
using Android.Widget;

namespace GoodsApp.Client.Code
{
  public static class EnumExtensions
  {
    private static DisplayAttribute GetFirstDisplayAttribute(Enum source)
    {
      return source
        ?.GetType()
        .GetMember(source.ToString())
        .First()
        .GetCustomAttributes(typeof(DisplayAttribute), false)
        .Select(o => o as DisplayAttribute)
        .FirstOrDefault();
    }

    public static string DisplayName(this Enum source)
    {
      return GetFirstDisplayAttribute(source)?.Name;
    }

    public static string DisplayDescription(this Enum source)
    {
      return GetFirstDisplayAttribute(source)?.Description;
    }
  }

  public enum TestEnum
  {
    [Display(Name = "Первый", Description = "Первый элемент")]
    One,

    [Display()]
    Two = 2,
    Three
  }
}