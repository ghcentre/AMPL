@model object
@{
  var viewData = Html.ViewContext.ViewData;
  var templateInfo = viewData.TemplateInfo;
  var modelMetadata = viewData.ModelMetadata;
  var config = (ViewData["EditorTemplateConfiguration"] as EditorTemplateConfiguration)
               ?? EditorTemplateConfiguration.DefaultConfiguration;

  EditorTemplateHelpers.OverrideContainerProperties(false, Html.ViewDataContainer.ViewData, modelMetadata, templateInfo, config);
}
@foreach(var propertyMetadata in modelMetadata.Properties
                                         .Where(pm => EditorTemplateHelpers.ShouldEditProperty(pm, templateInfo)))
{
  bool skipLabel = new[] { typeof(bool), typeof(bool?) }.Any(t => t == propertyMetadata.ModelType) &&
                   !config.SeparateCheckboxLabel;
  if(propertyMetadata.HideSurroundingHtml)
  {
    @Html.Editor(propertyMetadata.PropertyName)
  }
  else
  {
    <div class="form-group@(Html.ValidationErrorOrSuccess(propertyMetadata.PropertyName, " has-error", " has-success"))">
      @if(!skipLabel)
      {
        @Html.Label(propertyMetadata.PropertyName, new { @class = $"{config.LabelClass} control-label" })
      }
      <div class="@config.EditorClass@(skipLabel ? config.EditorOffsetClass : "")">
        @Html.Editor(propertyMetadata.PropertyName)
        @if(!propertyMetadata.HideSurroundingHtml)
        {
          @Html.ValidationMessage(propertyMetadata.PropertyName, new { @class = "help-block" })
          if(!string.IsNullOrEmpty(ModelMetadata.FromStringExpression(propertyMetadata.PropertyName, ViewData).Description))
          {
            <div class="help-block">@ModelMetadata.FromStringExpression(propertyMetadata.PropertyName, ViewData).Description</div>
          }
        }
      </div>
    </div>
  }
}
